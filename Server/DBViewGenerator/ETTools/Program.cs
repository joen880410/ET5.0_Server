using MongoDB.Bson.Serialization.Attributes;
using System;
using System.IO;
using System.Linq;
using System.Text;

namespace ETTools
{
    class Program
    {
        private const string DBViewSchemaPath = "../../Server/Model/Module/DB/";

        static void Main(string[] args)
        {
            bool firstIter = true;
            StringBuilder sb = new StringBuilder();
            StringBuilder sb2 = new StringBuilder();
            
            
            sb.AppendLine("// Generated by the Server.DBViewGenerator.  DO NOT EDIT!");
            sb.AppendLine("using System;");
            sb.AppendLine("using ETHotfix;");
            sb.AppendLine("using MongoDB.Bson;");
            sb.AppendLine("using Google.Protobuf.Collections;"); 
            sb.AppendLine("using MongoDB.Bson.Serialization.Attributes;");
            sb.AppendLine();
            sb.AppendLine("namespace ETModel");
            sb2.AppendLine("// Generated by the Server.DBViewGenerator.  DO NOT EDIT!");
            sb2.AppendLine();
            sb2.AppendLine("namespace ETModel");
            sb.AppendLine($"{{");
            sb2.AppendLine($"{{");
            foreach (Type type in typeof(DBView).Assembly.GetTypes())
            {
                if (type.IsSubclassOf(typeof(DBView)) && !type.IsAbstract) 
                {
                    if (!firstIter) 
                    {
                        sb.AppendLine();
                        sb2.AppendLine();
                    }
                    DBView dBView = (DBView)Activator.CreateInstance(type);
                    var dependencies = dBView.GetLookupDependencies();
                    sb.AppendLine($"\tpublic partial class {type.Name} : DBViewBase");
                    if (dependencies.Count != 0) 
                    {
                        sb2.AppendLine($"\t[DBViewDependency({string.Join(",", dependencies.Select(e => $"typeof({e.Name})"))})]");
                    }
                    sb2.AppendLine($"\tpublic partial class {type.Name}");
                    sb.AppendLine($"\t{{");
                    sb2.AppendLine($"\t{{");
                    var projects = dBView.GetProjectFieldsInformation();
                    for (int i = 0; i < projects.Count; i++) 
                    {
                        if (i != 0)
                        {
                            sb.AppendLine();
                        }

                        var proj = projects[i];
                        //是否有預設值
                        var defaultValue = dBView.GetProjectFieldsDefaultValue(proj.fieldName);
                        if (defaultValue!=null)
                        {
                            sb.AppendLine($"\t\t[BsonDefaultValue({defaultValue})]");
                        }
                        sb.AppendLine($"\t\tpublic {proj.typeName} {proj.fieldName} {{ get; set; }}");
                    }

                    var arrayProjects = dBView.GetProjectArrayFieldsInformation();
                    for (int i = 0; i < arrayProjects.Count; i++)
                    {
                        if (i != 0)
                        {
                            sb.AppendLine();
                        }
                        var proj = arrayProjects[i];
                        sb.AppendLine($"\t\tpublic {proj.typeName} {proj.fieldName} {{ get; set; }}");
                    }

                    // 儲存創建View表指令
                    sb2.AppendLine($"\t\tpublic override string _DBViewCommand => \"{dBView.ToViewCommand()}\";");
                    sb.AppendLine($"\t}}");

                    if (arrayProjects.Count != 0)
                    {
                        for (int i = 0; i < arrayProjects.Count; i++)
                        {
                            if (i != 0)
                            {
                                sb.AppendLine();
                            }
                            var proj = arrayProjects[i];
                            sb.AppendLine($"\tpublic class {proj.type.Name} : Entity");
                            sb.AppendLine($"\t{{");

                            var projFields = proj.GetProjectFieldsInformation();
                            if (projFields.Count <= 0)
                            {
                                sb.AppendLine($"\t}}");
                                continue;
                            }

                            for (int j = 0; j < projFields.Count; j++)
                            {
                                if (j != 0)
                                {
                                    sb.AppendLine();
                                }
                                var projField = projFields[j];
                                sb.AppendLine($"\t\tpublic {projField.typeName} {projField.fieldName} {{ get; set; }}");
                            }
                            sb.AppendLine($"\t}}");
                        }
                    }

                    sb2.AppendLine($"\t}}");

                    firstIter = false;
                }
            }
            sb.AppendLine($"}}");
            sb2.AppendLine($"}}");
            string csPath = Path.Combine(DBViewSchemaPath, "DBView.cs");
            File.WriteAllText(csPath, sb.ToString());
            csPath = Path.Combine(DBViewSchemaPath, "DBViewCommand.cs");
            File.WriteAllText(csPath, sb2.ToString());
            Console.WriteLine("DBView2CS succeed!");
        }
    }
}
