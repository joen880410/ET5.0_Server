// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Enums
  public enum AuthenticationType {
    Token = 0,
    Guest = 1,
    Account = 2,
  }

  public enum SocialEnum {
    None = 0,
    Facebook = 1,
    Ig = 2,
    Line = 3,
  }

  #endregion

  #region Messages
  public partial class PlayerBaseInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerBaseInfo> _parser = new pb::MessageParser<PlayerBaseInfo>(() => (PlayerBaseInfo)MessagePool.Instance.Fetch(typeof(PlayerBaseInfo)));
    public static pb::MessageParser<PlayerBaseInfo> Parser { get { return _parser; } }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private int birthday_;
    public int Birthday {
      get { return birthday_; }
      set {
        birthday_ = value;
      }
    }

    private long createAt_;
    public long CreateAt {
      get { return createAt_; }
      set {
        createAt_ = value;
      }
    }

    private long lastOnlineAt_;
    public long LastOnlineAt {
      get { return lastOnlineAt_; }
      set {
        lastOnlineAt_ = value;
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    private int language_;
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    private string cloudStorageUri_ = "";
    public string CloudStorageUri {
      get { return cloudStorageUri_; }
      set {
        cloudStorageUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string portraitImageName_ = "";
    public string PortraitImageName {
      get { return portraitImageName_; }
      set {
        portraitImageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int identity_;
    public int Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Location != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Location);
      }
      if (Birthday != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Birthday);
      }
      if (CreateAt != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CreateAt);
      }
      if (LastOnlineAt != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LastOnlineAt);
      }
      if (Coin != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Coin);
      }
      if (Language != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Language);
      }
      if (CloudStorageUri.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CloudStorageUri);
      }
      if (PortraitImageName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PortraitImageName);
      }
      if (Identity != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Identity);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (Birthday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Birthday);
      }
      if (CreateAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateAt);
      }
      if (LastOnlineAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastOnlineAt);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (CloudStorageUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloudStorageUri);
      }
      if (PortraitImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitImageName);
      }
      if (Identity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Identity);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      name_ = "";
      location_ = 0;
      birthday_ = 0;
      createAt_ = 0;
      lastOnlineAt_ = 0;
      coin_ = 0;
      language_ = 0;
      cloudStorageUri_ = "";
      portraitImageName_ = "";
      identity_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Location = input.ReadInt32();
            break;
          }
          case 56: {
            Birthday = input.ReadInt32();
            break;
          }
          case 64: {
            CreateAt = input.ReadInt64();
            break;
          }
          case 72: {
            LastOnlineAt = input.ReadInt64();
            break;
          }
          case 80: {
            Coin = input.ReadInt64();
            break;
          }
          case 88: {
            Language = input.ReadInt32();
            break;
          }
          case 98: {
            CloudStorageUri = input.ReadString();
            break;
          }
          case 106: {
            PortraitImageName = input.ReadString();
            break;
          }
          case 112: {
            Identity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_MessageTip : pb::IMessage {
    private static readonly pb::MessageParser<G2C_MessageTip> _parser = new pb::MessageParser<G2C_MessageTip>(() => (G2C_MessageTip)MessagePool.Instance.Fetch(typeof(G2C_MessageTip)));
    public static pb::MessageParser<G2C_MessageTip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string tipContent_ = "";
    public string TipContent {
      get { return tipContent_; }
      set {
        tipContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TipContent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TipContent);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TipContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TipContent);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tipContent_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TipContent = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class MapUnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapUnitInfo> _parser = new pb::MessageParser<MapUnitInfo>(() => (MapUnitInfo)MessagePool.Instance.Fetch(typeof(MapUnitInfo)));
    public static pb::MessageParser<MapUnitInfo> Parser { get { return _parser; } }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private long startUTCTick_;
    public long StartUTCTick {
      get { return startUTCTick_; }
      set {
        startUTCTick_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (RoomId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoomId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Location != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Location);
      }
      if (Uid != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Uid);
      }
      if (StartUTCTick != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(StartUTCTick);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (StartUTCTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTick);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      roomId_ = 0;
      name_ = "";
      location_ = 0;
      uid_ = 0;
      startUTCTick_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 16: {
            RoomId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Location = input.ReadInt32();
            break;
          }
          case 40: {
            Uid = input.ReadInt64();
            break;
          }
          case 48: {
            StartUTCTick = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitCreate : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitCreate> _parser = new pb::MessageParser<M2C_MapUnitCreate>(() => (M2C_MapUnitCreate)MessagePool.Instance.Fetch(typeof(M2C_MapUnitCreate)));
    public static pb::MessageParser<M2C_MapUnitCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.MapUnitInfo mapUnitInfo_;
    public global::ETHotfix.MapUnitInfo MapUnitInfo {
      get { return mapUnitInfo_; }
      set {
        mapUnitInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapUnitInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapUnitInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (mapUnitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapUnitInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (mapUnitInfo_ != null) MessagePool.Instance.Recycle(mapUnitInfo_); mapUnitInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mapUnitInfo_ == null) {
              mapUnitInfo_ = new global::ETHotfix.MapUnitInfo();
            }
            input.ReadMessage(mapUnitInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitUpdate : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitUpdate> _parser = new pb::MessageParser<M2C_MapUnitUpdate>(() => (M2C_MapUnitUpdate)MessagePool.Instance.Fetch(typeof(M2C_MapUnitUpdate)));
    public static pb::MessageParser<M2C_MapUnitUpdate> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitDestroy : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitDestroy> _parser = new pb::MessageParser<M2C_MapUnitDestroy>(() => (M2C_MapUnitDestroy)MessagePool.Instance.Fetch(typeof(M2C_MapUnitDestroy)));
    public static pb::MessageParser<M2C_MapUnitDestroy> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_MapUnitUpdate : pb::IMessage {
    private static readonly pb::MessageParser<C2M_MapUnitUpdate> _parser = new pb::MessageParser<C2M_MapUnitUpdate>(() => (C2M_MapUnitUpdate)MessagePool.Instance.Fetch(typeof(C2M_MapUnitUpdate)));
    public static pb::MessageParser<C2M_MapUnitUpdate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class RoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => (RoomInfo)MessagePool.Instance.Fetch(typeof(RoomInfo)));
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      title_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///連線
  /// </summary>
  public partial class G2C_ForceDisconnect : pb::IMessage {
    private static readonly pb::MessageParser<G2C_ForceDisconnect> _parser = new pb::MessageParser<G2C_ForceDisconnect>(() => (G2C_ForceDisconnect)MessagePool.Instance.Fetch(typeof(G2C_ForceDisconnect)));
    public static pb::MessageParser<G2C_ForceDisconnect> Parser { get { return _parser; } }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int disconnectInfo_;
    public int DisconnectInfo {
      get { return disconnectInfo_; }
      set {
        disconnectInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DisconnectInfo != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DisconnectInfo);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (DisconnectInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisconnectInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      disconnectInfo_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DisconnectInfo = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerStateData : pb::IMessage {
    private static readonly pb::MessageParser<PlayerStateData> _parser = new pb::MessageParser<PlayerStateData>(() => (PlayerStateData)MessagePool.Instance.Fetch(typeof(PlayerStateData)));
    public static pb::MessageParser<PlayerStateData> Parser { get { return _parser; } }

    private global::ETHotfix.PlayerStateData.Types.StateType type_ = 0;
    public global::ETHotfix.PlayerStateData.Types.StateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_parameters_codec
        = pb::FieldCodec.ForUInt64(18);
    private pbc::RepeatedField<ulong> parameters_ = new pbc::RepeatedField<ulong>();
    public pbc::RepeatedField<ulong> Parameters {
      get { return parameters_; }
      set { parameters_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      parameters_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::ETHotfix.PlayerStateData.Types.StateType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerStateData message type.</summary>
    public static class Types {
      public enum StateType {
        /// <summary>
        ///Parameter : 無
        /// </summary>
        Start = 0,
        /// <summary>
        ///Parameter : 無
        /// </summary>
        Lobby = 1,
        /// <summary>
        ///Parameter : 是否準備
        /// </summary>
        EnterRoom = 2,
        /// <summary>
        ///Parameter : 觀看角色Uid
        /// </summary>
        StartRoom = 3,
      }

    }
    #endregion

  }

  public partial class UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => (UserInfo)MessagePool.Instance.Fetch(typeof(UserInfo)));
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string deviceModel_ = "";
    public string DeviceModel {
      get { return deviceModel_; }
      set {
        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (DeviceModel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceModel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (DeviceModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      email_ = "";
      deviceModel_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            DeviceModel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class AccountInfo : pb::IMessage {
    private static readonly pb::MessageParser<AccountInfo> _parser = new pb::MessageParser<AccountInfo>(() => (AccountInfo)MessagePool.Instance.Fetch(typeof(AccountInfo)));
    public static pb::MessageParser<AccountInfo> Parser { get { return _parser; } }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class AuthenticationInfo : pb::IMessage {
    private static readonly pb::MessageParser<AuthenticationInfo> _parser = new pb::MessageParser<AuthenticationInfo>(() => (AuthenticationInfo)MessagePool.Instance.Fetch(typeof(AuthenticationInfo)));
    public static pb::MessageParser<AuthenticationInfo> Parser { get { return _parser; } }

    private int language_;
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    private string secret_ = "";
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.AuthenticationType type_ = 0;
    public global::ETHotfix.AuthenticationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private global::ETHotfix.UserInfo info_;
    public global::ETHotfix.UserInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Language != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Language);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Secret);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (info_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      language_ = 0;
      secret_ = "";
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Language = input.ReadInt32();
            break;
          }
          case 18: {
            Secret = input.ReadString();
            break;
          }
          case 24: {
            type_ = (global::ETHotfix.AuthenticationType) input.ReadEnum();
            break;
          }
          case 34: {
            if (info_ == null) {
              info_ = new global::ETHotfix.UserInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Authentication : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Authentication> _parser = new pb::MessageParser<C2R_Authentication>(() => (C2R_Authentication)MessagePool.Instance.Fetch(typeof(C2R_Authentication)));
    public static pb::MessageParser<C2R_Authentication> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private global::ETHotfix.AuthenticationInfo info_;
    public global::ETHotfix.AuthenticationInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.AuthenticationInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Authentication : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Authentication> _parser = new pb::MessageParser<R2C_Authentication>(() => (R2C_Authentication)MessagePool.Instance.Fetch(typeof(R2C_Authentication)));
    public static pb::MessageParser<R2C_Authentication> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_errorCodeList_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> errorCodeList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///錯誤列表
    /// </summary>
    public pbc::RepeatedField<int> ErrorCodeList {
      get { return errorCodeList_; }
      set { errorCodeList_ = value; }
    }

    private global::ETHotfix.PlayerBaseInfo data_;
    /// <summary>
    ///需要使用的資料
    /// </summary>
    public global::ETHotfix.PlayerBaseInfo Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private string token_ = "";
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AuthenticationType> _repeated_linkTypes_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::ETHotfix.AuthenticationType) x);
    private pbc::RepeatedField<global::ETHotfix.AuthenticationType> linkTypes_ = new pbc::RepeatedField<global::ETHotfix.AuthenticationType>();
    /// <summary>
    ///連接第三方平台
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.AuthenticationType> LinkTypes {
      get { return linkTypes_; }
      set { linkTypes_ = value; }
    }

    private string httpAddress_ = "";
    public string HttpAddress {
      get { return httpAddress_; }
      set {
        httpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string dBAddress_ = "";
    public string DBAddress {
      get { return dBAddress_; }
      set {
        dBAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      errorCodeList_.WriteTo(output, _repeated_errorCodeList_codec);
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Token);
      }
      linkTypes_.WriteTo(output, _repeated_linkTypes_codec);
      if (HttpAddress.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HttpAddress);
      }
      if (DBAddress.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DBAddress);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      size += errorCodeList_.CalculateSize(_repeated_errorCodeList_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += linkTypes_.CalculateSize(_repeated_linkTypes_codec);
      if (HttpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAddress);
      }
      if (DBAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DBAddress);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      errorCodeList_.Clear();
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      token_ = "";
      linkTypes_.Clear();
      httpAddress_ = "";
      dBAddress_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            errorCodeList_.AddEntriesFrom(input, _repeated_errorCodeList_codec);
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::ETHotfix.PlayerBaseInfo();
            }
            input.ReadMessage(data_);
            break;
          }
          case 50: {
            Token = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            linkTypes_.AddEntriesFrom(input, _repeated_linkTypes_codec);
            break;
          }
          case 66: {
            HttpAddress = input.ReadString();
            break;
          }
          case 74: {
            DBAddress = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_Logout : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Logout> _parser = new pb::MessageParser<C2G_Logout>(() => (C2G_Logout)MessagePool.Instance.Fetch(typeof(C2G_Logout)));
    public static pb::MessageParser<C2G_Logout> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Logout : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Logout> _parser = new pb::MessageParser<G2C_Logout>(() => (G2C_Logout)MessagePool.Instance.Fetch(typeof(G2C_Logout)));
    public static pb::MessageParser<G2C_Logout> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class LinkInfo : pb::IMessage {
    private static readonly pb::MessageParser<LinkInfo> _parser = new pb::MessageParser<LinkInfo>(() => (LinkInfo)MessagePool.Instance.Fetch(typeof(LinkInfo)));
    public static pb::MessageParser<LinkInfo> Parser { get { return _parser; } }

    private string secret_ = "";
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.AuthenticationType type_ = 0;
    public global::ETHotfix.AuthenticationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int language_;
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Secret.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Secret);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Language != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Language);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      secret_ = "";
      language_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Secret = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::ETHotfix.AuthenticationType) input.ReadEnum();
            break;
          }
          case 24: {
            Language = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_Link : pb::IMessage {
    private static readonly pb::MessageParser<C2L_Link> _parser = new pb::MessageParser<C2L_Link>(() => (C2L_Link)MessagePool.Instance.Fetch(typeof(C2L_Link)));
    public static pb::MessageParser<C2L_Link> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.LinkInfo info_;
    public global::ETHotfix.LinkInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.LinkInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_Link : pb::IMessage {
    private static readonly pb::MessageParser<L2C_Link> _parser = new pb::MessageParser<L2C_Link>(() => (L2C_Link)MessagePool.Instance.Fetch(typeof(L2C_Link)));
    public static pb::MessageParser<L2C_Link> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AuthenticationType> _repeated_linkTypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::ETHotfix.AuthenticationType) x);
    private pbc::RepeatedField<global::ETHotfix.AuthenticationType> linkTypes_ = new pbc::RepeatedField<global::ETHotfix.AuthenticationType>();
    public pbc::RepeatedField<global::ETHotfix.AuthenticationType> LinkTypes {
      get { return linkTypes_; }
      set { linkTypes_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      linkTypes_.WriteTo(output, _repeated_linkTypes_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += linkTypes_.CalculateSize(_repeated_linkTypes_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      linkTypes_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            linkTypes_.AddEntriesFrom(input, _repeated_linkTypes_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_UpdateUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<C2L_UpdateUserProfile> _parser = new pb::MessageParser<C2L_UpdateUserProfile>(() => (C2L_UpdateUserProfile)MessagePool.Instance.Fetch(typeof(C2L_UpdateUserProfile)));
    public static pb::MessageParser<C2L_UpdateUserProfile> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    /// 名子
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    /// <summary>
    ///性別
    /// </summary>
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      sex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Sex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_UpdateUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<L2C_UpdateUserProfile> _parser = new pb::MessageParser<L2C_UpdateUserProfile>(() => (L2C_UpdateUserProfile)MessagePool.Instance.Fetch(typeof(L2C_UpdateUserProfile)));
    public static pb::MessageParser<L2C_UpdateUserProfile> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_UpdateUserLanguage : pb::IMessage {
    private static readonly pb::MessageParser<C2L_UpdateUserLanguage> _parser = new pb::MessageParser<C2L_UpdateUserLanguage>(() => (C2L_UpdateUserLanguage)MessagePool.Instance.Fetch(typeof(C2L_UpdateUserLanguage)));
    public static pb::MessageParser<C2L_UpdateUserLanguage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int language_;
    /// <summary>
    /// </summary>
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Language != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Language);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      language_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Language = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_UpdateUserLanguage : pb::IMessage {
    private static readonly pb::MessageParser<L2C_UpdateUserLanguage> _parser = new pb::MessageParser<L2C_UpdateUserLanguage>(() => (L2C_UpdateUserLanguage)MessagePool.Instance.Fetch(typeof(L2C_UpdateUserLanguage)));
    public static pb::MessageParser<L2C_UpdateUserLanguage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 帐号
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_SyncPlayerState : pb::IMessage {
    private static readonly pb::MessageParser<C2L_SyncPlayerState> _parser = new pb::MessageParser<C2L_SyncPlayerState>(() => (C2L_SyncPlayerState)MessagePool.Instance.Fetch(typeof(C2L_SyncPlayerState)));
    public static pb::MessageParser<C2L_SyncPlayerState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.PlayerStateData stateData_;
    public global::ETHotfix.PlayerStateData StateData {
      get { return stateData_; }
      set {
        stateData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stateData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StateData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (stateData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (stateData_ != null) MessagePool.Instance.Recycle(stateData_); stateData_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stateData_ == null) {
              stateData_ = new global::ETHotfix.PlayerStateData();
            }
            input.ReadMessage(stateData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_SyncPlayerState : pb::IMessage {
    private static readonly pb::MessageParser<L2C_SyncPlayerState> _parser = new pb::MessageParser<L2C_SyncPlayerState>(() => (L2C_SyncPlayerState)MessagePool.Instance.Fetch(typeof(L2C_SyncPlayerState)));
    public static pb::MessageParser<L2C_SyncPlayerState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.L2C_SyncPlayerState.Types.OptionType type_ = 0;
    public global::ETHotfix.L2C_SyncPlayerState.Types.OptionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo> _repeated_mapUnitInfos_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.MapUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo> mapUnitInfos_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo> MapUnitInfos {
      get { return mapUnitInfos_; }
      set { mapUnitInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (MapUnitId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MapUnitId);
      }
      mapUnitInfos_.WriteTo(output, _repeated_mapUnitInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      size += mapUnitInfos_.CalculateSize(_repeated_mapUnitInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      mapUnitId_ = 0;
      for (int i = 0; i < mapUnitInfos_.Count; i++) { MessagePool.Instance.Recycle(mapUnitInfos_[i]); }
      mapUnitInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::ETHotfix.L2C_SyncPlayerState.Types.OptionType) input.ReadEnum();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 24: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 34: {
            mapUnitInfos_.AddEntriesFrom(input, _repeated_mapUnitInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the L2C_SyncPlayerState message type.</summary>
    public static class Types {
      public enum OptionType {
        /// <summary>
        ///不處理
        /// </summary>
        Nothing = 0,
        /// <summary>
        ///問要不要回EnterRoom
        /// </summary>
        CanReturnEnterRoom = 1,
        /// <summary>
        ///問要不要回StartRoom
        /// </summary>
        CanReturnStartRoom = 2,
        /// <summary>
        ///更新EnterRoom資料
        /// </summary>
        GetInfoEnterRoom = 3,
        /// <summary>
        ///更新StartRoom資料
        /// </summary>
        GetInfoStartRoom = 4,
        /// <summary>
        ///重跑進入StartRoom
        /// </summary>
        GoMap = 5,
      }

    }
    #endregion

  }

  public partial class L2M_TeamModifyMember : pb::IMessage {
    private static readonly pb::MessageParser<L2M_TeamModifyMember> _parser = new pb::MessageParser<L2M_TeamModifyMember>(() => (L2M_TeamModifyMember)MessagePool.Instance.Fetch(typeof(L2M_TeamModifyMember)));
    public static pb::MessageParser<L2M_TeamModifyMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      uid_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_TeamModifyMember : pb::IMessage {
    private static readonly pb::MessageParser<M2L_TeamModifyMember> _parser = new pb::MessageParser<M2L_TeamModifyMember>(() => (M2L_TeamModifyMember)MessagePool.Instance.Fetch(typeof(M2L_TeamModifyMember)));
    public static pb::MessageParser<M2L_TeamModifyMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_TeamLose : pb::IMessage {
    private static readonly pb::MessageParser<L2M_TeamLose> _parser = new pb::MessageParser<L2M_TeamLose>(() => (L2M_TeamLose)MessagePool.Instance.Fetch(typeof(L2M_TeamLose)));
    public static pb::MessageParser<L2M_TeamLose> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_TeamLose : pb::IMessage {
    private static readonly pb::MessageParser<M2L_TeamLose> _parser = new pb::MessageParser<M2L_TeamLose>(() => (M2L_TeamLose)MessagePool.Instance.Fetch(typeof(M2L_TeamLose)));
    public static pb::MessageParser<M2L_TeamLose> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_DeleteAccount : pb::IMessage {
    private static readonly pb::MessageParser<C2L_DeleteAccount> _parser = new pb::MessageParser<C2L_DeleteAccount>(() => (C2L_DeleteAccount)MessagePool.Instance.Fetch(typeof(C2L_DeleteAccount)));
    public static pb::MessageParser<C2L_DeleteAccount> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_DeleteAccount : pb::IMessage {
    private static readonly pb::MessageParser<L2C_DeleteAccount> _parser = new pb::MessageParser<L2C_DeleteAccount>(() => (L2C_DeleteAccount)MessagePool.Instance.Fetch(typeof(L2C_DeleteAccount)));
    public static pb::MessageParser<L2C_DeleteAccount> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
